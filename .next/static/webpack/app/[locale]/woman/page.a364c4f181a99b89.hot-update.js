"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[locale]/woman/page",{

/***/ "(app-pages-browser)/./lib/wordpress-api.ts":
/*!******************************!*\
  !*** ./lib/wordpress-api.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CATEGORY_SLUGS: function() { return /* binding */ CATEGORY_SLUGS; },\n/* harmony export */   authenticateWordPressUser: function() { return /* binding */ authenticateWordPressUser; },\n/* harmony export */   fetchAllCategories: function() { return /* binding */ fetchAllCategories; },\n/* harmony export */   fetchPost: function() { return /* binding */ fetchPost; },\n/* harmony export */   fetchPostsByCategory: function() { return /* binding */ fetchPostsByCategory; },\n/* harmony export */   fetchRecentPosts: function() { return /* binding */ fetchRecentPosts; },\n/* harmony export */   formatPostDate: function() { return /* binding */ formatPostDate; },\n/* harmony export */   getCategoryName: function() { return /* binding */ getCategoryName; },\n/* harmony export */   getFeaturedImageUrl: function() { return /* binding */ getFeaturedImageUrl; },\n/* harmony export */   getPostExcerpt: function() { return /* binding */ getPostExcerpt; },\n/* harmony export */   registerWordPressUser: function() { return /* binding */ registerWordPressUser; },\n/* harmony export */   testWordPressAPI: function() { return /* binding */ testWordPressAPI; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nconst WORDPRESS_API_BASE = \"https://renaspress.com/wp-json/wp/v2\";\n// Debug function to test WordPress API connectivity\nasync function testWordPressAPI() {\n    try {\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/users?per_page=1\"));\n        if (response.ok) {\n            return {\n                success: true\n            };\n        } else {\n            const errorData = await response.json();\n            return {\n                success: false,\n                error: \"WordPress API error: \".concat(response.status, \" - \").concat(errorData.message || \"Unknown error\")\n            };\n        }\n    } catch (error) {\n        return {\n            success: false,\n            error: \"WordPress API connection failed: \".concat(error)\n        };\n    }\n}\nasync function fetchPostsByCategory(categorySlug) {\n    let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, perPage = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n    try {\n        // First, get the category ID by slug\n        const categoryResponse = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/categories?slug=\").concat(categorySlug));\n        if (!categoryResponse.ok) {\n            throw new Error(\"Failed to fetch category: \".concat(categoryResponse.statusText));\n        }\n        const categories = await categoryResponse.json();\n        if (categories.length === 0) {\n            return [];\n        }\n        const categoryId = categories[0].id;\n        // Fetch posts by category ID\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/posts?categories=\").concat(categoryId, \"&page=\").concat(page, \"&per_page=\").concat(perPage, \"&_embed=true\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch posts: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n        return [];\n    }\n}\nasync function fetchAllCategories() {\n    try {\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/categories?per_page=100\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch categories: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching categories:\", error);\n        return [];\n    }\n}\nasync function fetchPost(slug) {\n    try {\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/posts?slug=\").concat(slug, \"&_embed=true\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch post: \".concat(response.statusText));\n        }\n        const posts = await response.json();\n        return posts.length > 0 ? posts[0] : null;\n    } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        return null;\n    }\n}\nasync function fetchRecentPosts() {\n    let perPage = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, categorySlug = arguments.length > 1 ? arguments[1] : void 0;\n    try {\n        let url = \"\".concat(WORDPRESS_API_BASE, \"/posts?per_page=\").concat(perPage, \"&orderby=date&order=desc&_embed=true\");\n        // If category is specified, filter by category\n        if (categorySlug) {\n            const categoryResponse = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/categories?slug=\").concat(categorySlug));\n            if (categoryResponse.ok) {\n                const categories = await categoryResponse.json();\n                if (categories.length > 0) {\n                    url += \"&categories=\".concat(categories[0].id);\n                }\n            }\n        }\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch recent posts: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching recent posts:\", error);\n        return [];\n    }\n}\nfunction getFeaturedImageUrl(post) {\n    var _post__embedded_wpfeaturedmedia_, _post__embedded_wpfeaturedmedia, _post__embedded;\n    if ((_post__embedded = post._embedded) === null || _post__embedded === void 0 ? void 0 : (_post__embedded_wpfeaturedmedia = _post__embedded[\"wp:featuredmedia\"]) === null || _post__embedded_wpfeaturedmedia === void 0 ? void 0 : (_post__embedded_wpfeaturedmedia_ = _post__embedded_wpfeaturedmedia[0]) === null || _post__embedded_wpfeaturedmedia_ === void 0 ? void 0 : _post__embedded_wpfeaturedmedia_.source_url) {\n        return post._embedded[\"wp:featuredmedia\"][0].source_url;\n    }\n    return \"/api/placeholder/800/500\";\n}\nfunction getPostExcerpt(post) {\n    let maxLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 150;\n    // Remove HTML tags and get clean text\n    const cleanText = post.excerpt.rendered.replace(/<[^>]*>/g, \"\").replace(/&[^;]+;/g, \" \").trim();\n    if (cleanText.length <= maxLength) {\n        return cleanText;\n    }\n    return cleanText.substring(0, maxLength).replace(/\\s+\\S*$/, \"\") + \"...\";\n}\nfunction formatPostDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n    });\n}\nfunction getCategoryName(post) {\n    var _post__embedded_wpterm, _post__embedded;\n    if ((_post__embedded = post._embedded) === null || _post__embedded === void 0 ? void 0 : (_post__embedded_wpterm = _post__embedded[\"wp:term\"]) === null || _post__embedded_wpterm === void 0 ? void 0 : _post__embedded_wpterm[0]) {\n        var _categories_;\n        const categories = post._embedded[\"wp:term\"][0];\n        return ((_categories_ = categories[0]) === null || _categories_ === void 0 ? void 0 : _categories_.name) || \"Uncategorized\";\n    }\n    return \"Uncategorized\";\n}\n// Category mapping for the specific categories mentioned\nconst CATEGORY_SLUGS = {\n    \"daily-news\": \"daily-news\",\n    \"charity\": \"charity\",\n    \"sports\": \"sports\",\n    \"woman\": \"woman\",\n    \"political-news\": \"political-news\"\n};\nasync function registerWordPressUser(username, email, password, firstName, lastName) {\n    try {\n        console.log(\"Attempting to register user:\", {\n            username,\n            email,\n            firstName,\n            lastName\n        });\n        // Since WordPress REST API requires authentication to create users,\n        // we'll create a local user account that can be synced with WordPress later\n        // This is a practical solution until proper WordPress API authentication is set up\n        // For now, we'll simulate successful registration\n        // In a production environment, you would:\n        // 1. Store user data in your database\n        // 2. Send user data to WordPress via a webhook or scheduled sync\n        // 3. Or use WordPress application passwords for API authentication\n        const newUser = {\n            id: Date.now(),\n            username,\n            email,\n            name: \"\".concat(firstName, \" \").concat(lastName).trim(),\n            first_name: firstName,\n            last_name: lastName,\n            roles: [\n                \"subscriber\"\n            ],\n            capabilities: {},\n            created_at: new Date().toISOString(),\n            wp_synced: false // Flag to track if synced with WordPress\n        };\n        // Generate token\n        const token = Buffer.from(\"\".concat(email, \":\").concat(Date.now())).toString(\"base64\");\n        console.log(\"User registered successfully (local):\", newUser);\n        // TODO: In production, store this user in your database\n        // TODO: Set up a webhook or scheduled job to sync with WordPress\n        // TODO: Or implement WordPress application password authentication\n        return {\n            success: true,\n            user: newUser,\n            token\n        };\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        return {\n            success: false,\n            error: \"Registration service unavailable. Please try again later.\"\n        };\n    }\n}\nasync function authenticateWordPressUser(username, password) {\n    try {\n        // WordPress doesn't have a direct login endpoint via REST API\n        // We need to use application passwords or implement custom authentication\n        // For now, we'll use a workaround by checking user existence and creating a session\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/users?search=\").concat(username));\n        if (!response.ok) {\n            return {\n                success: false,\n                error: \"Authentication service unavailable\"\n            };\n        }\n        const users = await response.json();\n        const user = users.find((u)=>u.email === username || u.username === username);\n        if (!user) {\n            return {\n                success: false,\n                error: \"Invalid credentials\"\n            };\n        }\n        // In a real implementation, you would verify the password\n        // For now, we'll create a token and return user data\n        const token = Buffer.from(\"\".concat(username, \":\").concat(Date.now())).toString(\"base64\");\n        return {\n            success: true,\n            user: {\n                id: user.id,\n                username: user.username,\n                email: user.email,\n                name: user.name,\n                first_name: user.first_name || \"\",\n                last_name: user.last_name || \"\",\n                roles: user.roles || [\n                    \"subscriber\"\n                ],\n                capabilities: user.capabilities || {}\n            },\n            token\n        };\n    } catch (error) {\n        console.error(\"WordPress authentication error:\", error);\n        return {\n            success: false,\n            error: \"Authentication service unavailable\"\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/wordpress-api.ts\n"));

/***/ })

});