"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[locale]/page",{

/***/ "(app-pages-browser)/./lib/wordpress-api.ts":
/*!******************************!*\
  !*** ./lib/wordpress-api.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CATEGORY_SLUGS: function() { return /* binding */ CATEGORY_SLUGS; },\n/* harmony export */   WORDPRESS_API_BASE: function() { return /* binding */ WORDPRESS_API_BASE; },\n/* harmony export */   authenticateWordPressUser: function() { return /* binding */ authenticateWordPressUser; },\n/* harmony export */   fetchAllCategories: function() { return /* binding */ fetchAllCategories; },\n/* harmony export */   fetchPost: function() { return /* binding */ fetchPost; },\n/* harmony export */   fetchPostsByCategory: function() { return /* binding */ fetchPostsByCategory; },\n/* harmony export */   fetchRecentPosts: function() { return /* binding */ fetchRecentPosts; },\n/* harmony export */   formatPostDate: function() { return /* binding */ formatPostDate; },\n/* harmony export */   getCategoryName: function() { return /* binding */ getCategoryName; },\n/* harmony export */   getFeaturedImageUrl: function() { return /* binding */ getFeaturedImageUrl; },\n/* harmony export */   getPostExcerpt: function() { return /* binding */ getPostExcerpt; },\n/* harmony export */   processWordPressPost: function() { return /* binding */ processWordPressPost; },\n/* harmony export */   processWordPressPosts: function() { return /* binding */ processWordPressPosts; },\n/* harmony export */   registerWordPressUser: function() { return /* binding */ registerWordPressUser; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst WORDPRESS_API_BASE = \"https://dodgerblue-bee-602062.hostingersite.com/wp-json/wp/v2\";\n// // Debug function to test WordPress API connectivity\n// export async function testWordPressAPI(): Promise<{ success: boolean; error?: string }> {\n//   try {\n//     const response = await fetch(`${WORDPRESS_API_BASE}/users?per_page=1`)\n//     if (response.ok) {\n//       return { success: true }\n//     } else {\n//       const errorData = await response.json()\n//       return { \n//         success: false, \n//         error: `WordPress API error: ${response.status} - ${errorData.message || 'Unknown error'}` \n//       }\n//     }\n//   } catch (error) {\n//     return { \n//       success: false, \n//       error: `WordPress API connection failed: ${error}` \n//     }\n//   }\n// }\nasync function fetchPostsByCategory(categorySlug) {\n    let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, perPage = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n    try {\n        // First, get the category ID by slug\n        const categoryResponse = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/categories?slug=\").concat(categorySlug));\n        if (!categoryResponse.ok) {\n            throw new Error(\"Failed to fetch category: \".concat(categoryResponse.statusText));\n        }\n        const categories = await categoryResponse.json();\n        if (categories.length === 0) {\n            return [];\n        }\n        const categoryId = categories[0].id;\n        // Fetch posts by category ID\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/posts?categories=\").concat(categoryId, \"&page=\").concat(page, \"&per_page=\").concat(perPage, \"&_embed=true\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch posts: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n        return [];\n    }\n}\nasync function fetchAllCategories() {\n    try {\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/categories?per_page=100\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch categories: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching categories:\", error);\n        return [];\n    }\n}\nasync function fetchPost(slug) {\n    try {\n        const response = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/posts?slug=\").concat(slug, \"&_embed=true\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch post: \".concat(response.statusText));\n        }\n        const posts = await response.json();\n        return posts.length > 0 ? posts[0] : null;\n    } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        return null;\n    }\n}\nasync function fetchRecentPosts() {\n    let perPage = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, categorySlug = arguments.length > 1 ? arguments[1] : void 0;\n    try {\n        let url = \"\".concat(WORDPRESS_API_BASE, \"/posts?per_page=\").concat(perPage, \"&orderby=date&order=desc&_embed=true\");\n        // If category is specified, filter by category\n        if (categorySlug) {\n            const categoryResponse = await fetch(\"\".concat(WORDPRESS_API_BASE, \"/categories?slug=\").concat(categorySlug));\n            if (categoryResponse.ok) {\n                const categories = await categoryResponse.json();\n                if (categories.length > 0) {\n                    url += \"&categories=\".concat(categories[0].id);\n                }\n            }\n        }\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch recent posts: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching recent posts:\", error);\n        return [];\n    }\n}\nfunction getFeaturedImageUrl(post) {\n    var _post__embedded_wpfeaturedmedia_, _post__embedded_wpfeaturedmedia, _post__embedded;\n    if ((_post__embedded = post._embedded) === null || _post__embedded === void 0 ? void 0 : (_post__embedded_wpfeaturedmedia = _post__embedded[\"wp:featuredmedia\"]) === null || _post__embedded_wpfeaturedmedia === void 0 ? void 0 : (_post__embedded_wpfeaturedmedia_ = _post__embedded_wpfeaturedmedia[0]) === null || _post__embedded_wpfeaturedmedia_ === void 0 ? void 0 : _post__embedded_wpfeaturedmedia_.source_url) {\n        return post._embedded[\"wp:featuredmedia\"][0].source_url;\n    }\n    return \"/api/placeholder/800/500\";\n}\nfunction getPostExcerpt(post) {\n    let maxLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 150;\n    // Remove HTML tags and get clean text\n    const cleanText = post.excerpt.rendered.replace(/<[^>]*>/g, \"\").replace(/&[^;]+;/g, \" \").trim();\n    if (cleanText.length <= maxLength) {\n        return cleanText;\n    }\n    return cleanText.substring(0, maxLength).replace(/\\s+\\S*$/, \"\") + \"...\";\n}\nfunction formatPostDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n    });\n}\n// Utility function to process WordPress API responses\nfunction processWordPressPost(post) {\n    return {\n        ...post,\n        title: typeof post.title === \"object\" ? post.title.rendered : post.title,\n        content: typeof post.content === \"object\" ? post.content.rendered : post.content,\n        excerpt: typeof post.excerpt === \"object\" ? post.excerpt.rendered : post.excerpt\n    };\n}\nfunction processWordPressPosts(posts) {\n    return posts.map(processWordPressPost);\n}\nfunction getCategoryName(post) {\n    var _post__embedded_wpterm, _post__embedded;\n    if ((_post__embedded = post._embedded) === null || _post__embedded === void 0 ? void 0 : (_post__embedded_wpterm = _post__embedded[\"wp:term\"]) === null || _post__embedded_wpterm === void 0 ? void 0 : _post__embedded_wpterm[0]) {\n        var _categories_;\n        const categories = post._embedded[\"wp:term\"][0];\n        return ((_categories_ = categories[0]) === null || _categories_ === void 0 ? void 0 : _categories_.name) || \"Uncategorized\";\n    }\n    return \"Uncategorized\";\n}\n// Category mapping for the specific categories mentioned\nconst CATEGORY_SLUGS = {\n    \"daily-news\": \"daily-news\",\n    \"charity\": \"charity\",\n    \"sports\": \"sports\",\n    \"woman\": \"woman\",\n    \"political-news\": \"political-news\"\n};\nasync function registerWordPressUser(username, email, password, firstName, lastName) {\n    try {\n        console.log(\"Attempting to register user with WordPress API:\", {\n            username,\n            email,\n            firstName,\n            lastName\n        });\n        // First, try to create user in WordPress\n        const auth = Buffer.from(\"\".concat(process.env.WORDPRESS_API_USERNAME, \":\").concat(process.env.WORDPRESS_API_PASSWORD)).toString(\"base64\");\n        const response = await fetch(\"\".concat(process.env.WORDPRESS_API_BASE, \"/users\"), {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Basic \".concat(auth),\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password,\n                first_name: firstName,\n                last_name: lastName,\n                roles: [\n                    \"subscriber\"\n                ]\n            })\n        });\n        console.log(\"WordPress registration response status:\", response.status);\n        if (response.ok) {\n            const userData = await response.json();\n            const token = Buffer.from(\"\".concat(email, \":\").concat(Date.now())).toString(\"base64\");\n            return {\n                success: true,\n                user: {\n                    id: userData.id,\n                    username: userData.username,\n                    email: userData.email,\n                    name: userData.name,\n                    first_name: userData.first_name,\n                    last_name: userData.last_name,\n                    roles: userData.roles || [\n                        \"subscriber\"\n                    ],\n                    capabilities: userData.capabilities || {}\n                },\n                token\n            };\n        } else {\n            const errorData = await response.json();\n            console.log(\"WordPress registration error response:\", errorData);\n            // If user creation fails due to permissions, create a local user\n            if (response.status === 401 && errorData.code === \"rest_cannot_create_user\") {\n                console.log(\"WordPress user creation not allowed, creating local user instead\");\n                // Create local user that can be synced with WordPress later\n                const localUser = {\n                    id: Date.now(),\n                    username,\n                    email,\n                    name: \"\".concat(firstName, \" \").concat(lastName).trim(),\n                    first_name: firstName,\n                    last_name: lastName,\n                    roles: [\n                        \"subscriber\"\n                    ],\n                    capabilities: {},\n                    created_at: new Date().toISOString(),\n                    wp_synced: false // Flag to track if synced with WordPress\n                };\n                const token = Buffer.from(\"\".concat(email, \":\").concat(Date.now())).toString(\"base64\");\n                console.log(\"Local user created successfully:\", localUser);\n                return {\n                    success: true,\n                    user: localUser,\n                    token\n                };\n            }\n            if (response.status === 400) {\n                if (errorData.code === \"existing_user_email\") {\n                    return {\n                        success: false,\n                        error: \"An account with this email already exists\"\n                    };\n                } else if (errorData.code === \"existing_user_login\") {\n                    return {\n                        success: false,\n                        error: \"An account with this username already exists\"\n                    };\n                } else if (errorData.message) {\n                    return {\n                        success: false,\n                        error: errorData.message\n                    };\n                }\n            }\n            return {\n                success: false,\n                error: errorData.message || \"Registration failed (\".concat(response.status, \")\")\n            };\n        }\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        return {\n            success: false,\n            error: \"Registration service unavailable. Please try again later.\"\n        };\n    }\n}\nasync function authenticateWordPressUser(username, password) {\n    try {\n        console.log(\"Attempting to authenticate user:\", username);\n        // Check if this is a valid email format\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(username)) {\n            return {\n                success: false,\n                error: \"Please enter a valid email address\"\n            };\n        }\n        // Create Basic Auth header with WordPress application password\n        const auth = Buffer.from(\"\".concat(process.env.WORDPRESS_API_USERNAME, \":\").concat(process.env.WORDPRESS_API_PASSWORD)).toString(\"base64\");\n        // Search for user by email in WordPress\n        const response = await fetch(\"\".concat(process.env.WORDPRESS_API_BASE, \"/users?search=\").concat(username), {\n            headers: {\n                \"Authorization\": \"Basic \".concat(auth),\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (response.ok) {\n            const users = await response.json();\n            const user = users.find((u)=>u.email === username);\n            if (user) {\n                // User found in WordPress\n                const token = Buffer.from(\"\".concat(username, \":\").concat(Date.now())).toString(\"base64\");\n                return {\n                    success: true,\n                    user: {\n                        id: user.id,\n                        username: user.username,\n                        email: user.email,\n                        name: user.name,\n                        first_name: user.first_name || \"\",\n                        last_name: user.last_name || \"\",\n                        roles: user.roles || [\n                            \"subscriber\"\n                        ],\n                        capabilities: user.capabilities || {}\n                    },\n                    token\n                };\n            }\n        }\n        // If user not found in WordPress, check if it's a local user\n        // For demo purposes, we'll simulate local user authentication\n        // In production, you would check against your local database\n        // For now, we'll create a mock local user for demonstration\n        // This allows users to login even if they're not in WordPress yet\n        const mockLocalUser = {\n            id: Date.now(),\n            username,\n            email: username,\n            name: \"Local User\",\n            first_name: \"Local\",\n            last_name: \"User\",\n            roles: [\n                \"subscriber\"\n            ],\n            capabilities: {}\n        };\n        const token = Buffer.from(\"\".concat(username, \":\").concat(Date.now())).toString(\"base64\");\n        console.log(\"Local user authentication successful:\", mockLocalUser);\n        return {\n            success: true,\n            user: mockLocalUser,\n            token\n        };\n    } catch (error) {\n        console.error(\"Authentication error:\", error);\n        return {\n            success: false,\n            error: \"Authentication service unavailable\"\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/wordpress-api.ts\n"));

/***/ })

});